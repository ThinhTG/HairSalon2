// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace HairSalon_BusinessObject.Models;

public partial class HairSalonContext : DbContext
{
    public HairSalonContext()
    {
    }

    public HairSalonContext(DbContextOptions<HairSalonContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Booking> Booking { get; set; }

    public virtual DbSet<BookingDetail> BookingDetail { get; set; }

    public virtual DbSet<Earning> Earning { get; set; }

    public virtual DbSet<Role> Role { get; set; }

    public virtual DbSet<Service> Service { get; set; }

    public virtual DbSet<Stylsit> Stylsit { get; set; }

    public virtual DbSet<User> User { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=localhost;Initial Catalog=HairSalon;User ID=SA;Password=12345;Encrypt=False");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Booking>(entity =>
        {
            entity.Property(e => e.BookingId)
                .HasMaxLength(50)
                .HasColumnName("bookingId");
            entity.Property(e => e.BookingDate)
                .HasColumnType("datetime")
                .HasColumnName("bookingDate");
            entity.Property(e => e.CreateBy)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("createBy");
            entity.Property(e => e.Discount)
                .HasColumnType("decimal(3, 0)")
                .HasColumnName("discount");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("status");
            entity.Property(e => e.TotalPrice)
                .HasColumnType("money")
                .HasColumnName("totalPrice");
        });

        modelBuilder.Entity<BookingDetail>(entity =>
        {
            entity.Property(e => e.BookingDetailId)
                .HasMaxLength(50)
                .HasColumnName("bookingDetailId");
            entity.Property(e => e.BookingId)
                .HasMaxLength(50)
                .HasColumnName("bookingId");
            entity.Property(e => e.ScheduledWorkingDay)
                .HasColumnType("datetime")
                .HasColumnName("scheduledWorkingDay");
            entity.Property(e => e.ServiceId)
                .HasMaxLength(50)
                .HasColumnName("serviceId");
            entity.Property(e => e.StylistId)
                .HasMaxLength(50)
                .HasColumnName("stylistId");

            entity.HasOne(d => d.Booking).WithMany(p => p.BookingDetail)
                .HasForeignKey(d => d.BookingId)
                .HasConstraintName("FK_BookingDetail_Booking");

            entity.HasOne(d => d.Service).WithMany(p => p.BookingDetail)
                .HasForeignKey(d => d.ServiceId)
                .HasConstraintName("FK_BookingDetail_Service");

            entity.HasOne(d => d.Stylist).WithMany(p => p.BookingDetail)
                .HasForeignKey(d => d.StylistId)
                .HasConstraintName("FK_BookingDetail_Stylsit");
        });

        modelBuilder.Entity<Earning>(entity =>
        {
            entity.Property(e => e.EarningId)
                .HasMaxLength(50)
                .HasColumnName("earningId");
            entity.Property(e => e.Commission)
                .HasColumnType("money")
                .HasColumnName("commission");
            entity.Property(e => e.StylistId)
                .HasMaxLength(50)
                .HasColumnName("stylistId");
            entity.Property(e => e.TotalSalary)
                .HasColumnType("money")
                .HasColumnName("totalSalary");

            entity.HasOne(d => d.Stylist).WithMany(p => p.Earning)
                .HasForeignKey(d => d.StylistId)
                .HasConstraintName("FK_Earning_Stylsit");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.Property(e => e.RoleId)
                .HasMaxLength(50)
                .HasColumnName("roleId");
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("roleName");
        });

        modelBuilder.Entity<Service>(entity =>
        {
            entity.Property(e => e.ServiceId)
                .HasMaxLength(50)
                .HasColumnName("serviceId");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("description");
            entity.Property(e => e.Image)
                .IsRequired()
                .HasColumnType("image")
                .HasColumnName("image");
            entity.Property(e => e.Price)
                .HasColumnType("money")
                .HasColumnName("price");
            entity.Property(e => e.ServiceName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("serviceName");
        });

        modelBuilder.Entity<Stylsit>(entity =>
        {
            entity.HasKey(e => e.StylistId);

            entity.Property(e => e.StylistId)
                .HasMaxLength(50)
                .HasColumnName("stylistId");
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fullName");
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("phoneNumber");
            entity.Property(e => e.Salary)
                .HasColumnType("money")
                .HasColumnName("salary");
            entity.Property(e => e.Specialty)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("specialty");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.Property(e => e.UserId)
                .HasMaxLength(50)
                .HasColumnName("userId");
            entity.Property(e => e.CreatedAt)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("createdAt");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("password");
            entity.Property(e => e.PhoneNumber)
                .HasColumnType("decimal(10, 0)")
                .HasColumnName("phoneNumber");
            entity.Property(e => e.RoleId)
                .HasMaxLength(50)
                .HasColumnName("roleId");
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("userName");

            entity.HasOne(d => d.Role).WithMany(p => p.User)
                .HasForeignKey(d => d.RoleId)
                .HasConstraintName("FK_User_Role");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}